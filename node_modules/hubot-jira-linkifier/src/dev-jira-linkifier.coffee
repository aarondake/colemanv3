# Description
#   Hubot listens for a list of your JIRA project codes and responds with full clickable links to the tickets.
#
# Configuration:
#  HUBOT_JIRA_LINKIFIER_JIRA_URL
#  HUBOT_JIRA_LINKIFIER_PROJECT_PREFIXES
#
# Commands:
#   hubot hello - <what the respond trigger does>
#   orly - <what the hear trigger does>
#
# Notes:
#   <optional notes required for the script>
#
# Author:
#   Chris Coveney <xkickflip@gmail.com>

module.exports = (robot) ->

  # ENV variable for list of project prefixes
  prefixes = process.env.HUBOT_JIRA_LINKIFIER_PROJECT_PREFIXES?.split(',') || []

  # Base URL for your JIRA install.  Strip trailing slash if it's included
  jiraUrl = process.env.HUBOT_JIRA_LINKIFIER_JIRA_URL || ""

  # Strip leading & trailing whitespace & trailing /
  jiraUrl = jiraUrl.replace /^\s+|\s+$|\/\s*$/g, ""

  ticketRegExp = null

  # insensitive match all occurences of ticket tags like "FOO-2345" accounting for it occuring at
  # the beginning of the string or separated from the string by whitespace on both sides
  #
  # TODO: the capture groups with the global match are always returning the spaces with the matches
  # not sure how to split that out in the .match so for now I'm trimming the matches in the .hear block below
  # buildTicketRegex = ->
  #   ticketRegExp = new RegExp "(^|\\s+)(#{prefixes.join('|')})-[0-9]+($|\\s+)", "gi"


  # when ticketRegExp is changed we need to redefine this with the latest version
  robot.hear ///(^|\\s+)(#{prefixes.join('|')})-[0-9]+($|\\s+)///gi, (res) ->
    for ticketMatch in res.match
      res.send "#{jiraUrl}/browse/#{ticketMatch.trim().toUpperCase()}"


  # setupTicketMatcher = ->

  #   # TODO: seems like this needs to be in a function like this so it can be redefined whenever the regexp gets changed?

  #   # when ticketRegExp is changed we need to redefine this with the latest version
  #   robot.hear ticketRegExp, (res) ->
  #     for ticketMatch in res.match
  #       res.send "#{jiraUrl}/browse/#{ticketMatch.trim().toUpperCase()}"


  # Get things started
  # buildTicketRegex()
  # setupTicketMatcher()


  # TODO: debug print the generated regex, remove me
  robot.hear /jira regexp/i, (res) ->
    res.send ticketRegExp


  robot.hear /jira url/i, (res) ->
    res.send jiraUrl


  robot.hear /jira set url (.*)/i, (res) ->
    jiraUrl = res.match[1]
    res.send "Jira URL set to: #{jiraUrl}"



  # "jira prefixes": print out all current prefixes that will be matched
  robot.hear /jira list prefixes/i, (res) ->
    if prefixes.length == 0
      res.send "Jira Prefix list is empty."
    else
      res.send "Currently matching Jira project prefixes: #{prefixes.join(',')}"


  robot.hear /jira add prefix (.*)/i, (res) ->
    newPrefix = res.match[1]

    if newPrefix not in prefixes
      prefixes.push newPrefix

      # rebuild the matcher regexp
      # buildTicketRegex()
      # setupTicketMatcher()



  robot.hear /jira remove prefix (.*)/i, (res) ->

    prefixToRemove = res.match[1]

    if prefixToRemove in prefixes

      prefixes = prefixes.filter (prefix) -> prefix isnt prefixToRemove

      # rebuild the matcher regexp
      # buildTicketRegex()
      # setupTicketMatcher()




  # TODO: store prefixes in robot.brain
  # if the brain has prefixes then don't load the ENV variables anymore


  # TODO: if  the hubot admin extension is installed don't allow modifying prefixes
  # unless the user has the "jira-linkifier-admin" role or something